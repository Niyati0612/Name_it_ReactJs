{"ast":null,"code":"// TODO:\n// suffix input, eg, -ploy\n\n// Try these:\n// - place site point spot local\n// - trade stock\n// - health fit\n\nconst sortBy = require('lodash/sortBy');\nconst getRandom = require('random-seed');\nconst permutate = require('./permutate').permutate;\nconst score = require('./score').score;\nconst normalize = require('./normalize').normalize;\n\n/**\n * Names your shitty startup. Returns a list of possible names.\n * @example\n *\n *     namer('cloud')\n *     namer('health fit')\n *     namer(['health', 'fit'])\n *     => ['Fitrise', 'Fityard', 'Healthup', ...]\n */\n\nfunction namer(words) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof words === 'string') words = words.split(' ');\n  let list = permutate(words);\n\n  // Random number generator\n  let gen = getRandom(options.seed || Math.random());\n  let rand = () => gen.floatBetween(0, 1);\n  list = list.map(word => ({\n    word: normalize(word),\n    score: score(word, {\n      rand\n    })\n  }));\n\n  // Sort by score\n  list = sortBy(list, _ref => {\n    let {\n      word,\n      score\n    } = _ref;\n    return -1 * score;\n  });\n\n  // Reduce to just words\n  list = list.map(_ref2 => {\n    let {\n      word,\n      score\n    } = _ref2;\n    return word;\n  });\n  return list;\n}\n\n/*\n * Export\n */\n\nmodule.exports = namer;","map":{"version":3,"names":["sortBy","require","getRandom","permutate","score","normalize","namer","words","options","arguments","length","undefined","split","list","gen","seed","Math","random","rand","floatBetween","map","word","_ref","_ref2","module","exports"],"sources":["D:/Internship(Tecunique)/React-projects/Domain_name_search/node_modules/@rstacruz/startup-name-generator/lib/index.js"],"sourcesContent":["// TODO:\n// suffix input, eg, -ploy\n\n// Try these:\n// - place site point spot local\n// - trade stock\n// - health fit\n\nconst sortBy = require('lodash/sortBy')\nconst getRandom = require('random-seed')\nconst permutate = require('./permutate').permutate\nconst score = require('./score').score\nconst normalize = require('./normalize').normalize\n\n/**\n * Names your shitty startup. Returns a list of possible names.\n * @example\n *\n *     namer('cloud')\n *     namer('health fit')\n *     namer(['health', 'fit'])\n *     => ['Fitrise', 'Fityard', 'Healthup', ...]\n */\n\nfunction namer (words, options = {}) {\n  if (typeof words === 'string') words = words.split(' ')\n\n  let list = permutate(words)\n\n  // Random number generator\n  let gen = getRandom(options.seed || Math.random())\n  let rand = () => gen.floatBetween(0, 1)\n\n  list = list.map((word) => ({\n    word: normalize(word),\n    score: score(word, { rand })\n  }))\n\n  // Sort by score\n  list = sortBy(list, ({ word, score }) => -1 * score)\n\n  // Reduce to just words\n  list = list.map(({ word, score }) => word)\n\n  return list\n}\n\n/*\n * Export\n */\n\nmodule.exports = namer\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACvC,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC,CAACE,SAAS;AAClD,MAAMC,KAAK,GAAGH,OAAO,CAAC,SAAS,CAAC,CAACG,KAAK;AACtC,MAAMC,SAAS,GAAGJ,OAAO,CAAC,aAAa,CAAC,CAACI,SAAS;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAKA,CAAEC,KAAK,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACjC,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAEA,KAAK,GAAGA,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;EAEvD,IAAIC,IAAI,GAAGV,SAAS,CAACI,KAAK,CAAC;;EAE3B;EACA,IAAIO,GAAG,GAAGZ,SAAS,CAACM,OAAO,CAACO,IAAI,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAClD,IAAIC,IAAI,GAAGA,CAAA,KAAMJ,GAAG,CAACK,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC;EAEvCN,IAAI,GAAGA,IAAI,CAACO,GAAG,CAAEC,IAAI,KAAM;IACzBA,IAAI,EAAEhB,SAAS,CAACgB,IAAI,CAAC;IACrBjB,KAAK,EAAEA,KAAK,CAACiB,IAAI,EAAE;MAAEH;IAAK,CAAC;EAC7B,CAAC,CAAC,CAAC;;EAEH;EACAL,IAAI,GAAGb,MAAM,CAACa,IAAI,EAAES,IAAA;IAAA,IAAC;MAAED,IAAI;MAAEjB;IAAM,CAAC,GAAAkB,IAAA;IAAA,OAAK,CAAC,CAAC,GAAGlB,KAAK;EAAA,EAAC;;EAEpD;EACAS,IAAI,GAAGA,IAAI,CAACO,GAAG,CAACG,KAAA;IAAA,IAAC;MAAEF,IAAI;MAAEjB;IAAM,CAAC,GAAAmB,KAAA;IAAA,OAAKF,IAAI;EAAA,EAAC;EAE1C,OAAOR,IAAI;AACb;;AAEA;AACA;AACA;;AAEAW,MAAM,CAACC,OAAO,GAAGnB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}