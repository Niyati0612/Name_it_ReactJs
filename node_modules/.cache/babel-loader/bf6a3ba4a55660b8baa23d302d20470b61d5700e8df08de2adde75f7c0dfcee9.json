{"ast":null,"code":"'use strict';\n\n/* Dependencies. */\nvar has = require('has');\nvar pluralize = require('pluralize');\nvar normalize = require('normalize-strings');\nvar problematic = require('./problematic');\n\n/* Expose. */\nmodule.exports = syllables;\n\n/* Two expressions of occurrences which normally would\n * be counted as two syllables, but should be counted\n * as one. */\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp('cia(l|$)|' + 'tia|' + 'cius|' + 'cious|' + '[^aeiou]giu|' + '[aeiouy][^aeiouy]ion|' + 'iou|' + 'sia$|' + 'eous$|' + '[oa]gue$|' + '.[^aeiuoycgltdb]{2,}ed$|' + '.ely$|' + '^jua|' + 'uai|' + 'eau|' + '^busi$|' + '(' + '[aeiouy]' + '(' + 'b|' + 'c|' + 'ch|' + 'dg|' + 'f|' + 'g|' + 'gh|' + 'gn|' + 'k|' + 'l|' + 'lch|' + 'll|' + 'lv|' + 'm|' + 'mm|' + 'n|' + 'nc|' + 'ng|' + 'nch|' + 'nn|' + 'p|' + 'r|' + 'rc|' + 'rn|' + 'rs|' + 'rv|' + 's|' + 'sc|' + 'sk|' + 'sl|' + 'squ|' + 'ss|' + 'th|' + 'v|' + 'y|' + 'z' + ')' + 'ed$' + ')|' + '(' + '[aeiouy]' + '(' + 'b|' + 'ch|' + 'd|' + 'f|' + 'gh|' + 'gn|' + 'k|' + 'l|' + 'lch|' + 'll|' + 'lv|' + 'm|' + 'mm|' + 'n|' + 'nch|' + 'nn|' + 'p|' + 'r|' + 'rn|' + 'rs|' + 'rv|' + 's|' + 'sc|' + 'sk|' + 'sl|' + 'squ|' + 'ss|' + 'st|' + 't|' + 'th|' + 'v|' + 'y' + ')' + 'es$' + ')', 'g');\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp('[aeiouy]' + '(' + 'b|' + 'c|' + 'ch|' + 'd|' + 'dg|' + 'f|' + 'g|' + 'gh|' + 'gn|' + 'k|' + 'l|' + 'll|' + 'lv|' + 'm|' + 'mm|' + 'n|' + 'nc|' + 'ng|' + 'nn|' + 'p|' + 'r|' + 'rc|' + 'rn|' + 'rs|' + 'rv|' + 's|' + 'sc|' + 'sk|' + 'sl|' + 'squ|' + 'ss|' + 'st|' + 't|' + 'th|' + 'v|' + 'y|' + 'z' + ')' + 'e$', 'g');\n\n/* Four expression of occurrences which normally would be\n * counted as one syllable, but should be counted as two. */\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp('(' + '(' + '[^aeiouy]' + ')\\\\2l|' + '[^aeiouy]ie' + '(' + 'r|' + 'st|' + 't' + ')|' + '[aeiouym]bl|' + 'eo|' + 'ism|' + 'asm|' + 'thm|' + 'dnt|' + 'uity|' + 'dea|' + 'gean|' + 'oa|' + 'ua|' + 'eings?|' + '[aeiouy]sh?e[rsd]' + ')$', 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp('[^gq]ua[^auieo]|' + '[aeiou]{3}|' + '^(' + 'ia|' + 'mc|' + 'coa[dglx].' + ')', 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp('[^aeiou]y[ae]|' + '[^l]lien|' + 'riet|' + 'dien|' + 'iu|' + 'io|' + 'ii|' + 'uen|' + 'real|' + 'iell|' + 'eo[^aeiou]|' + '[aeiou]y[aeiou]', 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/;\n\n/* Expression to match single syllable pre- and suffixes. */\nvar EXPRESSION_SINGLE = new RegExp('^' + '(' + 'un|' + 'fore|' + 'ware|' + 'none?|' + 'out|' + 'post|' + 'sub|' + 'pre|' + 'pro|' + 'dis|' + 'side' + ')' + '|' + '(' + 'ly|' + 'less|' + 'some|' + 'ful|' + 'ers?|' + 'ness|' + 'cians?|' + 'ments?|' + 'ettes?|' + 'villes?|' + 'ships?|' + 'sides?|' + 'ports?|' + 'shires?|' + 'tion(ed)?' + ')' + '$', 'g');\n\n/* Expression to match double syllable pre- and suffixes. */\nvar EXPRESSION_DOUBLE = new RegExp('^' + '(' + 'above|' + 'anti|' + 'ante|' + 'counter|' + 'hyper|' + 'afore|' + 'agri|' + 'infra|' + 'intra|' + 'inter|' + 'over|' + 'semi|' + 'ultra|' + 'under|' + 'extra|' + 'dia|' + 'micro|' + 'mega|' + 'kilo|' + 'pico|' + 'nano|' + 'macro' + ')' + '|' + '(' + 'fully|' + 'berry|' + 'woman|' + 'women' + ')' + '$', 'g');\n\n/* Expression to match triple syllable suffixes. */\nvar EXPRESSION_TRIPLE = /(ology|ologist|onomy|onomist)$/g;\n\n/* Expression to split on word boundaries. */\nvar SPLIT = /\\b/g;\n\n/* Expression to remove non-alphabetic characters from\n * a given value. */\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g;\n\n/* Wrapper to support multiple word-parts (GH-11). */\nfunction syllables(value) {\n  var values = normalize(String(value)).toLowerCase().split(SPLIT);\n  var length = values.length;\n  var index = -1;\n  var total = 0;\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''));\n  }\n  return total;\n}\n\n/* Get syllables in a given value. */\nfunction syllable(value) {\n  var count = 0;\n  var index;\n  var length;\n  var singular;\n  var parts;\n  var addOne;\n  var subtractOne;\n  if (!value.length) {\n    return count;\n  }\n\n  /* Return early when possible. */\n  if (value.length < 3) {\n    return 1;\n  }\n\n  /* If `value` is a hard to count, it might be\n   * in `problematic`. */\n  if (has(problematic, value)) {\n    return problematic[value];\n  }\n\n  /* Additionally, the singular word might be\n   * in `problematic`. */\n  singular = pluralize(value, 1);\n  if (has(problematic, singular)) {\n    return problematic[singular];\n  }\n  addOne = returnFactory(1);\n  subtractOne = returnFactory(-1);\n\n  /* Count some prefixes and suffixes, and remove\n   * their matched ranges. */\n  value = value.replace(EXPRESSION_TRIPLE, countFactory(3)).replace(EXPRESSION_DOUBLE, countFactory(2)).replace(EXPRESSION_SINGLE, countFactory(1));\n\n  /* Count multiple consonants. */\n  parts = value.split(/[^aeiouy]+/);\n  index = -1;\n  length = parts.length;\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++;\n    }\n  }\n\n  /* Subtract one for occurrences which should be\n   * counted as one (but are counted as two). */\n  value.replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne).replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne);\n\n  /* Add one for occurrences which should be counted\n   * as two (but are counted as one). */\n  value.replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne);\n\n  /* Make sure at least on is returned. */\n  return count || 1;\n\n  /* Define scoped counters, to be used\n   * in `String#replace()` calls.\n   * The scoped counter removes the matched value\n   * from the input. */\n  function countFactory(addition) {\n    return counter;\n    function counter() {\n      count += addition;\n      return '';\n    }\n  }\n\n  /* Define scoped counters, to be used\n   * in `String#replace()` calls.\n   * The scoped counter does not remove the matched\n   * value from the input. */\n  function returnFactory(addition) {\n    return returner;\n    function returner($0) {\n      count += addition;\n      return $0;\n    }\n  }\n}","map":{"version":3,"names":["has","require","pluralize","normalize","problematic","module","exports","syllables","EXPRESSION_MONOSYLLABIC_ONE","RegExp","EXPRESSION_MONOSYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_ONE","EXPRESSION_DOUBLE_SYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_THREE","EXPRESSION_DOUBLE_SYLLABIC_FOUR","EXPRESSION_SINGLE","EXPRESSION_DOUBLE","EXPRESSION_TRIPLE","SPLIT","EXPRESSION_NONALPHABETIC","value","values","String","toLowerCase","split","length","index","total","syllable","replace","count","singular","parts","addOne","subtractOne","returnFactory","countFactory","addition","counter","returner","$0"],"sources":["D:/Internship(Tecunique)/React-projects/Reactjs/Domain_name_search/node_modules/syllable/index.js"],"sourcesContent":["'use strict';\n\n/* Dependencies. */\nvar has = require('has');\nvar pluralize = require('pluralize');\nvar normalize = require('normalize-strings');\nvar problematic = require('./problematic');\n\n/* Expose. */\nmodule.exports = syllables;\n\n/* Two expressions of occurrences which normally would\n * be counted as two syllables, but should be counted\n * as one. */\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  'cia(l|$)|' +\n  'tia|' +\n  'cius|' +\n  'cious|' +\n  '[^aeiou]giu|' +\n  '[aeiouy][^aeiouy]ion|' +\n  'iou|' +\n  'sia$|' +\n  'eous$|' +\n  '[oa]gue$|' +\n  '.[^aeiuoycgltdb]{2,}ed$|' +\n  '.ely$|' +\n  '^jua|' +\n  'uai|' +\n  'eau|' +\n  '^busi$|' +\n  '(' +\n    '[aeiouy]' +\n    '(' +\n      'b|' +\n      'c|' +\n      'ch|' +\n      'dg|' +\n      'f|' +\n      'g|' +\n      'gh|' +\n      'gn|' +\n      'k|' +\n      'l|' +\n      'lch|' +\n      'll|' +\n      'lv|' +\n      'm|' +\n      'mm|' +\n      'n|' +\n      'nc|' +\n      'ng|' +\n      'nch|' +\n      'nn|' +\n      'p|' +\n      'r|' +\n      'rc|' +\n      'rn|' +\n      'rs|' +\n      'rv|' +\n      's|' +\n      'sc|' +\n      'sk|' +\n      'sl|' +\n      'squ|' +\n      'ss|' +\n      'th|' +\n      'v|' +\n      'y|' +\n      'z' +\n    ')' +\n    'ed$' +\n  ')|' +\n  '(' +\n    '[aeiouy]' +\n    '(' +\n      'b|' +\n      'ch|' +\n      'd|' +\n      'f|' +\n      'gh|' +\n      'gn|' +\n      'k|' +\n      'l|' +\n      'lch|' +\n      'll|' +\n      'lv|' +\n      'm|' +\n      'mm|' +\n      'n|' +\n      'nch|' +\n      'nn|' +\n      'p|' +\n      'r|' +\n      'rn|' +\n      'rs|' +\n      'rv|' +\n      's|' +\n      'sc|' +\n      'sk|' +\n      'sl|' +\n      'squ|' +\n      'ss|' +\n      'st|' +\n      't|' +\n      'th|' +\n      'v|' +\n      'y' +\n    ')' +\n    'es$' +\n  ')',\n  'g'\n);\n\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy]' +\n  '(' +\n    'b|' +\n    'c|' +\n    'ch|' +\n    'd|' +\n    'dg|' +\n    'f|' +\n    'g|' +\n    'gh|' +\n    'gn|' +\n    'k|' +\n    'l|' +\n    'll|' +\n    'lv|' +\n    'm|' +\n    'mm|' +\n    'n|' +\n    'nc|' +\n    'ng|' +\n    'nn|' +\n    'p|' +\n    'r|' +\n    'rc|' +\n    'rn|' +\n    'rs|' +\n    'rv|' +\n    's|' +\n    'sc|' +\n    'sk|' +\n    'sl|' +\n    'squ|' +\n    'ss|' +\n    'st|' +\n    't|' +\n    'th|' +\n    'v|' +\n    'y|' +\n    'z' +\n  ')' +\n  'e$',\n  'g'\n);\n\n/* Four expression of occurrences which normally would be\n * counted as one syllable, but should be counted as two. */\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(' +\n    '(' +\n      '[^aeiouy]' +\n    ')\\\\2l|' +\n    '[^aeiouy]ie' +\n    '(' +\n      'r|' +\n      'st|' +\n      't' +\n    ')|' +\n    '[aeiouym]bl|' +\n    'eo|' +\n    'ism|' +\n    'asm|' +\n    'thm|' +\n    'dnt|' +\n    'uity|' +\n    'dea|' +\n    'gean|' +\n    'oa|' +\n    'ua|' +\n    'eings?|' +\n    '[aeiouy]sh?e[rsd]' +\n  ')$',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  '[^gq]ua[^auieo]|' +\n  '[aeiou]{3}|' +\n  '^(' +\n    'ia|' +\n    'mc|' +\n    'coa[dglx].' +\n  ')',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  '[^aeiou]y[ae]|' +\n  '[^l]lien|' +\n  'riet|' +\n  'dien|' +\n  'iu|' +\n  'io|' +\n  'ii|' +\n  'uen|' +\n  'real|' +\n  'iell|' +\n  'eo[^aeiou]|' +\n  '[aeiou]y[aeiou]',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/;\n\n/* Expression to match single syllable pre- and suffixes. */\nvar EXPRESSION_SINGLE = new RegExp(\n  '^' +\n  '(' +\n    'un|' +\n    'fore|' +\n    'ware|' +\n    'none?|' +\n    'out|' +\n    'post|' +\n    'sub|' +\n    'pre|' +\n    'pro|' +\n    'dis|' +\n    'side' +\n  ')' +\n  '|' +\n  '(' +\n    'ly|' +\n    'less|' +\n    'some|' +\n    'ful|' +\n    'ers?|' +\n    'ness|' +\n    'cians?|' +\n    'ments?|' +\n    'ettes?|' +\n    'villes?|' +\n    'ships?|' +\n    'sides?|' +\n    'ports?|' +\n    'shires?|' +\n    'tion(ed)?' +\n  ')' +\n  '$',\n  'g'\n);\n\n/* Expression to match double syllable pre- and suffixes. */\nvar EXPRESSION_DOUBLE = new RegExp(\n  '^' +\n  '(' +\n    'above|' +\n    'anti|' +\n    'ante|' +\n    'counter|' +\n    'hyper|' +\n    'afore|' +\n    'agri|' +\n    'infra|' +\n    'intra|' +\n    'inter|' +\n    'over|' +\n    'semi|' +\n    'ultra|' +\n    'under|' +\n    'extra|' +\n    'dia|' +\n    'micro|' +\n    'mega|' +\n    'kilo|' +\n    'pico|' +\n    'nano|' +\n    'macro' +\n  ')' +\n  '|' +\n  '(' +\n    'fully|' +\n    'berry|' +\n    'woman|' +\n    'women' +\n  ')' +\n  '$',\n  'g'\n);\n\n/* Expression to match triple syllable suffixes. */\nvar EXPRESSION_TRIPLE = /(ology|ologist|onomy|onomist)$/g;\n\n/* Expression to split on word boundaries. */\nvar SPLIT = /\\b/g;\n\n/* Expression to remove non-alphabetic characters from\n * a given value. */\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g;\n\n/* Wrapper to support multiple word-parts (GH-11). */\nfunction syllables(value) {\n  var values = normalize(String(value)).toLowerCase().split(SPLIT);\n  var length = values.length;\n  var index = -1;\n  var total = 0;\n\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''));\n  }\n\n  return total;\n}\n\n/* Get syllables in a given value. */\nfunction syllable(value) {\n  var count = 0;\n  var index;\n  var length;\n  var singular;\n  var parts;\n  var addOne;\n  var subtractOne;\n\n  if (!value.length) {\n    return count;\n  }\n\n  /* Return early when possible. */\n  if (value.length < 3) {\n    return 1;\n  }\n\n  /* If `value` is a hard to count, it might be\n   * in `problematic`. */\n  if (has(problematic, value)) {\n    return problematic[value];\n  }\n\n  /* Additionally, the singular word might be\n   * in `problematic`. */\n  singular = pluralize(value, 1);\n\n  if (has(problematic, singular)) {\n    return problematic[singular];\n  }\n\n  addOne = returnFactory(1);\n  subtractOne = returnFactory(-1);\n\n  /* Count some prefixes and suffixes, and remove\n   * their matched ranges. */\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1));\n\n  /* Count multiple consonants. */\n  parts = value.split(/[^aeiouy]+/);\n  index = -1;\n  length = parts.length;\n\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++;\n    }\n  }\n\n  /* Subtract one for occurrences which should be\n   * counted as one (but are counted as two). */\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne);\n\n  /* Add one for occurrences which should be counted\n   * as two (but are counted as one). */\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne);\n\n  /* Make sure at least on is returned. */\n  return count || 1;\n\n /* Define scoped counters, to be used\n  * in `String#replace()` calls.\n  * The scoped counter removes the matched value\n  * from the input. */\n  function countFactory(addition) {\n    return counter;\n    function counter() {\n      count += addition;\n      return '';\n    }\n  }\n\n /* Define scoped counters, to be used\n  * in `String#replace()` calls.\n  * The scoped counter does not remove the matched\n  * value from the input. */\n  function returnFactory(addition) {\n    return returner;\n    function returner($0) {\n      count += addition;\n      return $0;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}